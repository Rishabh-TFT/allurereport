{
  "uid" : "23f5377a8dee38ee",
  "name" : "test_verify_template_page_after_login",
  "fullName" : "test_templates_run#test_verify_template_page_after_login",
  "historyId" : "ab95c69d47b9211197bd51d1dc9f89d8",
  "time" : {
    "start" : 1643965288894,
    "stop" : 1643965594209,
    "duration" : 305315
  },
  "description" : "/builds/easyhi/qa-sanity-automation/feature_files/test_templates.feature: Verify template page after login",
  "descriptionHtml" : "<p>/builds/easyhi/qa-sanity-automation/feature_files/test_templates.feature: Verify template page after login</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: ('I customize template', <module 'traceback' from '/usr/local/lib/python3.10/traceback.py'>)",
  "statusTrace" : "browser = <seleniumwire.webdriver.Chrome (session=\"533f165130e967e5a5269d61db79121a\")>\n\n    @then('I customize template')\n    def customize_a_template(browser):\n        try:\n>           customize_template(browser)\n\ntests/test_templates_page.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nbrowser = <seleniumwire.webdriver.Chrome (session=\"533f165130e967e5a5269d61db79121a\")>\n\n    def customize_template(browser):\n        \"\"\"\n        Clicks on Customize button\n        \"\"\"\n        elem = browser.find_element_by_xpath(ALL_TEMPLATES_CTA[1])\n        template_cta = \"selected\" in elem.get_attribute(\"class\")\n        if template_cta is False:\n            template_page_header = browser.find_element_by_xpath(TEMPLATE_PAGE_HEADER_TITLE[1])\n            all_templates_btn = browser.find_element_by_xpath(ALL_TEMPLATES_CTA[1])\n            try:\n                all_templates_btn.location_once_scrolled_into_view()\n            except TypeError:\n                pass\n            try:\n                template_page_header.location_once_scrolled_into_view()\n            except TypeError:\n                pass\n        else:\n            pass\n        do_click(browser, ALL_TEMPLATES_CTA)\n        try:\n            do_hover(browser, HOVER_TEMPLATE)\n        except StaleElementReferenceException:\n            time.sleep(1)\n            do_hover(browser, HOVER_TEMPLATE)\n        try:\n>           do_click(browser, CUSTOMIZE_TEMP_BTN)\n\npages/templates_page.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nbrowser = <seleniumwire.webdriver.Chrome (session=\"533f165130e967e5a5269d61db79121a\")>\nby_locator = ('xpath', '(//BUTTON[@data-qaid=\"template_video_item_customize\"])[1]')\nsec = 10\n\n    def do_click(browser, by_locator, sec=10):\n        \"\"\"\n        Waits and clicks on the chosen element\n        Args:\n            browser: webdriver\n            by_locator (str): chosen locator from locators/locators_file.py\n            sec (int): default time to wait\n        \"\"\"\n>       WebDriverWait(browser, sec, poll_frequency=0.4).until(\n            EC.element_to_be_clickable(by_locator)).click()\n\nhelpers/common_helpers.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"533f165130e967e5a5269d61db79121a\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f494c518700>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except InvalidSelectorException as e:\n                raise e\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:89: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <FixtureRequest for <Function test_verify_template_page_after_login>>\n_pytest_bdd_example = {}\n\n    @pytest.mark.usefixtures(*args)\n    def scenario_wrapper(request, _pytest_bdd_example):\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\nvenv/lib/python3.10/site-packages/pytest_bdd/scenario.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.10/site-packages/pytest_bdd/scenario.py:144: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nvenv/lib/python3.10/site-packages/pytest_bdd/scenario.py:114: in _execute_step_function\n    return_value = step_func(**kwargs)\ntests/test_templates_page.py:50: in customize_a_template\n    bs_fail_with_traceback(browser, customize_a_template)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nbrowser = <seleniumwire.webdriver.Chrome (session=\"533f165130e967e5a5269d61db79121a\")>\nmain_func = <function customize_a_template at 0x7f494de3d990>\n\n    def bs_fail_with_traceback(browser, main_func):\n        func_name = main_func.__name__\n        if os.environ['browser'] == 'browserstack':\n            errors = get_error_console_logs(browser)\n            error_string = str(', '.join(errors))\n            step_logs = func_name + \", LOGs: \" + error_string\n            print(error_string)\n            import pprint\n            pprint.pprint(error_string)\n            allure_screenshot(browser)\n            try:\n                browser.execute_script(f'browserstack_executor: {{\"action\": \"setSessionStatus\", \"arguments\": {{\"status\":\"failed\", \"reason\": \"Failed Step: {step_logs}\"}}}}')\n            except WebDriverException:\n                browser.execute_script(\n                    f'browserstack_executor: {{\"action\": \"setSessionStatus\", \"arguments\": {{\"status\":\"failed\", \"reason\": \"Failed Step: {func_name}\"}}}}')\n        else:\n            take_screenshot(browser)\n            errors = get_error_console_logs(browser)\n            import pprint\n            pprint.pprint(errors)\n            pass\n>       raise AssertionError(func_name, traceback)\nE       AssertionError: ('I customize template', <module 'traceback' from '/usr/local/lib/python3.10/traceback.py'>)\n\nhelpers/common_helpers.py:292: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "_pytest_bdd_example",
    "time" : {
      "start" : 1643965288892,
      "stop" : 1643965288892,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "/builds/easyhi/qa-sanity-automation/feature_files/test_templates.feature: Verify template page after login",
    "status" : "failed",
    "statusMessage" : "AssertionError: ('I customize template', <module 'traceback' from '/usr/local/lib/python3.10/traceback.py'>)",
    "statusTrace" : "browser = <seleniumwire.webdriver.Chrome (session=\"533f165130e967e5a5269d61db79121a\")>\n\n    @then('I customize template')\n    def customize_a_template(browser):\n        try:\n>           customize_template(browser)\n\ntests/test_templates_page.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nbrowser = <seleniumwire.webdriver.Chrome (session=\"533f165130e967e5a5269d61db79121a\")>\n\n    def customize_template(browser):\n        \"\"\"\n        Clicks on Customize button\n        \"\"\"\n        elem = browser.find_element_by_xpath(ALL_TEMPLATES_CTA[1])\n        template_cta = \"selected\" in elem.get_attribute(\"class\")\n        if template_cta is False:\n            template_page_header = browser.find_element_by_xpath(TEMPLATE_PAGE_HEADER_TITLE[1])\n            all_templates_btn = browser.find_element_by_xpath(ALL_TEMPLATES_CTA[1])\n            try:\n                all_templates_btn.location_once_scrolled_into_view()\n            except TypeError:\n                pass\n            try:\n                template_page_header.location_once_scrolled_into_view()\n            except TypeError:\n                pass\n        else:\n            pass\n        do_click(browser, ALL_TEMPLATES_CTA)\n        try:\n            do_hover(browser, HOVER_TEMPLATE)\n        except StaleElementReferenceException:\n            time.sleep(1)\n            do_hover(browser, HOVER_TEMPLATE)\n        try:\n>           do_click(browser, CUSTOMIZE_TEMP_BTN)\n\npages/templates_page.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nbrowser = <seleniumwire.webdriver.Chrome (session=\"533f165130e967e5a5269d61db79121a\")>\nby_locator = ('xpath', '(//BUTTON[@data-qaid=\"template_video_item_customize\"])[1]')\nsec = 10\n\n    def do_click(browser, by_locator, sec=10):\n        \"\"\"\n        Waits and clicks on the chosen element\n        Args:\n            browser: webdriver\n            by_locator (str): chosen locator from locators/locators_file.py\n            sec (int): default time to wait\n        \"\"\"\n>       WebDriverWait(browser, sec, poll_frequency=0.4).until(\n            EC.element_to_be_clickable(by_locator)).click()\n\nhelpers/common_helpers.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"533f165130e967e5a5269d61db79121a\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f494c518700>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except InvalidSelectorException as e:\n                raise e\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:89: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <FixtureRequest for <Function test_verify_template_page_after_login>>\n_pytest_bdd_example = {}\n\n    @pytest.mark.usefixtures(*args)\n    def scenario_wrapper(request, _pytest_bdd_example):\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\nvenv/lib/python3.10/site-packages/pytest_bdd/scenario.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.10/site-packages/pytest_bdd/scenario.py:144: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nvenv/lib/python3.10/site-packages/pytest_bdd/scenario.py:114: in _execute_step_function\n    return_value = step_func(**kwargs)\ntests/test_templates_page.py:50: in customize_a_template\n    bs_fail_with_traceback(browser, customize_a_template)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nbrowser = <seleniumwire.webdriver.Chrome (session=\"533f165130e967e5a5269d61db79121a\")>\nmain_func = <function customize_a_template at 0x7f494de3d990>\n\n    def bs_fail_with_traceback(browser, main_func):\n        func_name = main_func.__name__\n        if os.environ['browser'] == 'browserstack':\n            errors = get_error_console_logs(browser)\n            error_string = str(', '.join(errors))\n            step_logs = func_name + \", LOGs: \" + error_string\n            print(error_string)\n            import pprint\n            pprint.pprint(error_string)\n            allure_screenshot(browser)\n            try:\n                browser.execute_script(f'browserstack_executor: {{\"action\": \"setSessionStatus\", \"arguments\": {{\"status\":\"failed\", \"reason\": \"Failed Step: {step_logs}\"}}}}')\n            except WebDriverException:\n                browser.execute_script(\n                    f'browserstack_executor: {{\"action\": \"setSessionStatus\", \"arguments\": {{\"status\":\"failed\", \"reason\": \"Failed Step: {func_name}\"}}}}')\n        else:\n            take_screenshot(browser)\n            errors = get_error_console_logs(browser)\n            import pprint\n            pprint.pprint(errors)\n            pass\n>       raise AssertionError(func_name, traceback)\nE       AssertionError: ('I customize template', <module 'traceback' from '/usr/local/lib/python3.10/traceback.py'>)\n\nhelpers/common_helpers.py:292: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ba4d78b67c304cdb",
      "name" : "ss20220204-090236.png",
      "source" : "ba4d78b67c304cdb.png",
      "type" : "image/png",
      "size" : 1197915
    }, {
      "uid" : "ca7a9b5e06bbbd4f",
      "name" : "ss20220204-090250.png",
      "source" : "ca7a9b5e06bbbd4f.png",
      "type" : "image/png",
      "size" : 800456
    }, {
      "uid" : "bb2288ff90ac5770",
      "name" : "stdout",
      "source" : "bb2288ff90ac5770.txt",
      "type" : "text/plain",
      "size" : 435
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures"
  }, {
    "name" : "suite",
    "value" : "test_templates_run"
  }, {
    "name" : "host",
    "value" : "runner-im8xmk4p-project-25-concurrent-0"
  }, {
    "name" : "thread",
    "value" : "2899-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_templates_run"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "@pytest.mark.usefixtures" ]
  },
  "source" : "23f5377a8dee38ee.json",
  "parameterValues" : [ ]
}